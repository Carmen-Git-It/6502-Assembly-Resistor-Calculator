; 6502 Resistor Colour Calculator
; Carmen Whitton -- https://github.com/Carmen-Git-It/
; 2023/10/08
; Unlicensed

; ROM routine entry points
define		SCINIT		$ff81 ; initialize/clear screen
define		CHRIN		$ffcf ; input character from keyboard
define		CHROUT		$ffd2 ; output character to screen
define		SCREEN		$ffed ; get screen size
define		PLOT		$fff0 ; get/set cursor coordinates

; zeropage variables
define		PRINT_PTR	$00
define		PRINT_PTR_H	$01
define		CURRENT		$02
define		SCRN_PTR	$03
define		SCRN_PTR_H	$04
define    BAND $05          ; Page to draw on for the current band
define    BAND_VALUE_1 $06  ; Stores the value of band 1
define    BAND_VALUE_2 $07  ; Stores the value of band 2
define    BAND_VALUE_3 $08  ; Stores the value of band 3
define    BAND_VALUE_4 $09  ; Stores the value of band 4
define    LIST_MAX $0a      ; max length of the colour list
define    COLOUR_MAP $0b    ; next 12 entries are the values of the colours in order of the selection
; TODO: store 2 band values per byte

; constants
define BAND_1  2  ; page of band 1
define BAND_2  3  ; page of band 2
define BAND_3  4  ; page of band 3
define BAND_4  5  ; page of band 4
define BAND_MAX 6 ; beyond the last band page
define LIST_MAX 10
; --------------------------------------------------------

; Colour Map Initialization
jsr SCINIT    ; Clear screen
lda #$00
ldx #$00
sta COLOUR_MAP    ; BLACK
lda #$09        
inx
sta COLOUR_MAP,x  ; BROWN
lda #$02
inx
sta COLOUR_MAP,x  ; RED
lda #$08
inx
sta COLOUR_MAP,x  ; ORANGE
lda #$07
inx
sta COLOUR_MAP,x  ; YELLOW
lda #$05
inx
sta COLOUR_MAP,x  ; GREEN
lda #$06
inx
sta COLOUR_MAP,x  ; BLUE
lda #$04
inx
sta COLOUR_MAP,x  ; PURPLE
lda #$0c
inx
sta COLOUR_MAP,x  ; GREY
lda #$01
inx
sta COLOUR_MAP,x  ; WHITE
lda #$08
inx
sta COLOUR_MAP,x  ; GOLD (orange is as close to gold as I can get, unfortunately)
lda #$0f
inx
sta COLOUR_MAP,x  ; LIGHT GREY

; Other init
start:
  lda #$0a
  sta LIST_MAX  ; set default value of colour list size
  lda #$00      
  sta BAND      ; Set default value of band

; Main loop
loop:
  jsr STEP      ; Go to the next band
  jsr WRITE     ; Print the text for the current band
  lda #$01      ; Default select the first colour entry
  jsr SELECT    ; Select colour subroutine
  jsr SCINIT    ; Clear screen
  jsr DRAW      ; Draw the selected colour
  jmp loop

;brk             ; Current end

; ----------------------------------------------------------------------------------
; STEP :: Moves to the next band, or finalizes

STEP:
  ldx BAND        ; check the current band
  cpx #$00
  bne next_band   ; if the band isn't at the default value, increment the band
  ldx #BAND_1 
  stx BAND        ; set the current band page for drawing
  rts

next_band:        ; Iterates to the next band
  inx             ; Increment X
  cpx #BAND_MAX
  beq final_band  ; If max band after inx, we are done
  stx BAND        ; Set the new value of band
  rts             ; Return to main

final_band: ; Sets up for the final result
  brk       ; PLACEHOLDER


; ----------------------------------------------------------------------------------
; WRITE :: Prints the text for selecting the next colour

WRITE:
  ldx BAND
  cpx #BAND_1
  beq write_first
  ldx BAND
  cpx #BAND_2
  beq write_second
  ldx BAND
  cpx #BAND_3
  beq write_third
  lda #$12
  sta LIST_MAX        ; change the max list length to account for the two new colours.
  ldx BAND
  cpx #BAND_4
  beq write_fourth

write_first:
  ldy #$00
  jsr print_band_1    ; print the band1 message
  ldy #$00
  jsr print_band_colours  ; print the list of colours
  rts

write_second:
  ldy #$00
  jsr print_band_2    ; print the band1 message
  ldy #$00
  jsr print_band_colours  ; print the list of colours
  rts

write_third:
  ldy #$00
  jsr print_band_3    ; print the band1 message
  ldy #$00
  jsr print_band_colours  ; print the list of colours
  rts

write_fourth:
  ldy #$00
  jsr print_band_1    ; print the band1 message
  ldy #$00
  jsr print_mul_colours  ; print the list of colours
  rts

print_band_1: lda first,y
  beq endroutine
  jsr CHROUT
  iny
  bne print_band_1
  
print_band_2: lda second,y
  beq endroutine
  jsr CHROUT
  iny
  bne print_band_2

print_band_3: lda third,y
  beq endroutine
  jsr CHROUT
  iny
  bne print_band_3

print_band_4: lda fourth,y
  beq endroutine
  jsr CHROUT
  iny
  bne print_band_4

print_band_colours:  lda colours,y
  beq endroutine
  jsr CHROUT
  iny
  bne print_band_colours

print_mul_colours:  lda mul_colours,y
  beq endroutine
  jsr CHROUT
  iny
  bne print_mul_colours

endroutine:
  rts

; ----------------------------------------------------------------------------------
; SELECT :: Select a colour out of the list

SELECT:
  sta CURRENT     ; Store the currently highlighted colour
  jsr HIGHLIGHT ; Highlight the currently selected line

getKey:
  jsr CHRIN     ; Get keyboard input
  cmp #$80      ; Cursor up
  bne try_down  ; check if cursor down

  lda CURRENT
  cmp #$01      ; Don't allow cursor up at the top of the list
  beq getKey
  jsr HIGHLIGHT
  dec CURRENT
  jsr HIGHLIGHT
  jmp getKey

try_down:
  cmp #$82      ; Cursor down
  bne try_enter    ; if it isn't cursor down it's unimportant

  lda CURRENT
  cmp LIST_MAX  ; Down go down if it's already at the bottom
  beq getKey
  jsr HIGHLIGHT
  inc CURRENT
  jsr HIGHLIGHT
  jmp getKey

try_enter:
  cmp #$0d      ; Return / Enter
  bne getKey

return:         ; Return from the current subroutine
  lda CURRENT
  rts           

; ---------------------------------------------------------------------------------- 
; HIGHLIGHT :: Highlight the CURRENT line in the menu

HIGHLIGHT:
  ldy CURRENT   ; Load the currently selected index
  ldx #$00      ; Set the starting column
  clc           ; Clear the carry so PLOT sets the cursor
  jsr PLOT      ; Set the cursor

highlight_next:
  sec           ; Set the carry so plot retrieves cursor
  jsr PLOT      ; Retrieve cursor
  eor #$80      ; XOR A to swap the background and foreground colours (black back white text)
  jsr CHROUT    ; Print A to cursor position

  inx           ; move to the next column
  cpx #20       ; don't highlight past #20
  bne highlight_next

  rts

; ---------------------------------------------------------------------------------- 
; DRAW :: Draw the selected colour in its designated band area

DRAW:
  lda CURRENT       ; load in the currently selected index
  sec               ; set carry flag
  sbc #$01          ; subtract one for the offset between the start of the list and the 0 index
  tax               ; transfer A to X to use as the index against the colour map
  lda COLOUR_MAP,x  ; load the colour code into A
  ldy #$00          
  sty SCRN_PTR
  ldx BAND          ; load the page of the display to draw in for the current band
  stx SCRN_PTR_H    ; high pointer for the display
  
draw_page:
  sta (SCRN_PTR),y  ; draw the colour onto the given "pixel"
  iny
  bne draw_page
  
  rts

colours:
dcb "B","l","a","c","k",$0d       ;00
dcb "B","r","o","w","n",$0d       ;09
dcb "R","e","d",$0d               ;02
dcb "O","r","a","n","g","e",$0d   ;08
dcb "Y","e","l","l","o","w",$0d   ;07
dcb "G","r","e","e","n",$0d       ;05
dcb "B","l","u","e",$0d           ;06
dcb "P","u","r","p","l","e",$0d   ;04
dcb "G","r","e","y",$0d           ;0c
dcb "W","h","i","t","e",$00       ;01

mul_colours:
dcb "B","l","a","c","k",$0d       ;00
dcb "B","r","o","w","n",$0d       ;09
dcb "R","e","d",$0d               ;02
dcb "O","r","a","n","g","e",$0d   ;08
dcb "Y","e","l","l","o","w",$0d   ;07
dcb "G","r","e","e","n",$0d       ;05
dcb "B","l","u","e",$0d           ;06
dcb "P","u","r","p","l","e",$0d   ;04
dcb "G","r","e","y",$0d           ;0c
dcb "W","h","i","t","e",$0d       ;01
dcb "G","o","l","d",$0d           ;08 orange for now
dcb "S","i","l","v","e","r",$00   ;0f

first:
dcb "P", "l", "e", "a", "s", "e", 32, "s", "e"
dcb "l", "e", "c", "t", 32, "t", "h", "e", 32
dcb "c", "o", "l", "o", "u", "r", 32, "o", "f"
dcb 32, "t", "h", "e", 32, "f", "i", "r", "s"
dcb "t", 32, "b", "a", "n", "d", 32, "f", "r"
dcb "o", "m", 32, "t", "h", "e", 32, "l", "i"
dcb "s", "t", 32, "b", "e", "l", "o", "w", ":",$0d,$00

second:
dcb "P", "l", "e", "a", "s", "e", 32, "s", "e",
dcb "l", "e", "c", "t", 32, "t", "h", "e", 32,
dcb "c", "o", "l", "o", "u", "r", 32, "o", "f",
dcb 32, "t", "h", "e", 32, "s", "e", "c", "o",
dcb "n", "d", 32, "b", "a", "n", "d", 32, "f", "r",
dcb "o", "m", 32, "t", "h", "e", 32, "l", "i",
dcb "s", "t", 32, "b", "e", "l", "o", "w", ":",$0d,$00

third:
dcb "P", "l", "e", "a", "s", "e", 32, "s", "e",
dcb "l", "e", "c", "t", 32, "t", "h", "e", 32,
dcb "c", "o", "l", "o", "u", "r", 32, "o", "f",
dcb 32, "t", "h", "e", 32, "t", "h", "i", "r",
dcb "r", "d", 32, "b", "a", "n", "d", 32, "f", "r",
dcb "o", "m", 32, "t", "h", "e", 32, "l", "i",
dcb "s", "t", 32, "b", "e", "l", "o", "w", ":",$0d,$00

fourth:
dcb "P", "l", "e", "a", "s", "e", 32, "s", "e",
dcb "l", "e", "c", "t", 32, "t", "h", "e", 32,
dcb "c", "o", "l", "o", "u", "r", 32, "o", "f",
dcb 32, "t", "h", "e", 32, "f", "o", "u", "r",
dcb "t", "h", 32, "b", "a", "n", "d", 32, "f", "r",
dcb "o", "m", 32, "t", "h", "e", 32, "l", "i",
dcb "s", "t", 32, "b", "e", "l", "o", "w", ":",$0d,$00